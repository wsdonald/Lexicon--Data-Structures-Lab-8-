#BlueJ class context
comment0.target=LexiconTrie
comment0.text=\n\ LexiconTrie\n\ \n\ Implements\ Lexicon\ interface,\ by\ executing\ all\ of\ its\ methods.\n\ Stores\ nodes\ in\ a\ structure,\ from\ which\ they\ can\ be\ accessed\ as\ words,\ prefixes\ regexs\ and\ spelling\ corrections\n\ \n\ @author\ WS\ Donaldson\n
comment1.params=
comment1.target=LexiconTrie()
comment10.params=target\ maxDistance
comment10.target=java.util.Set\ suggestCorrections(java.lang.String,\ int)
comment10.text=\n\ suggestCorrections\n\ calls\ a\ recursive\ helper\ method\ and\ returns\ a\ list\ of\ possible\ corrections\ to\ a\ word\n\ \n\ @param\ target\ -\ the\ word\ to\ be\ corrected\n\ @param\ maxDistance\ -\ the\ number\ of\ changes\ from\ the\ target\ one\ can\ make\n\ \n\ @return\ Set<String>\ -\ The\ set\ of\ possible\ corrections\n
comment11.params=target\ flexibility\ corrections\ prefix\ current
comment11.target=void\ buildCorrections(java.lang.String,\ int,\ java.util.Set,\ java.lang.String,\ LexiconNode)
comment11.text=\n\ buildCorrections\n\ the\ helper\ method\ for\ suggestCorrections\ -\ builds\ a\ list\ of\ all\ possible\ corrections\ to\ a\ target/maxdistance\ combo\n\ \n\ @param\ target\ -\ the\ word\ to\ be\ corrected\n\ @param\ flexibility\ -\ the\ number\ of\ changes\ which\ are\ still\ allowed\ to\ the\ target\n\ @param\ corrections\ -\ the\ list\ of\ words\ \n\ @param\ prefix\ -\ builds\ up\ the\ path\ taken\ to\ the\ final\ node\ in\ the\ word\n\ @param\ current\ -\ the\ node\ that\ is\ currently\ being\ examined.\n
comment12.params=pattern
comment12.target=java.util.Set\ matchRegex(java.lang.String)
comment12.text=\n\ matchRegex\n\ Calls\ a\ recursive\ helper\ method,\ then\ returns\ matches\ on\ a\ regex\ pattern\n\ \n\ @param\ pattern\ -\ the\ regex\n\ @return\ Set<String>\ -\ the\ matches\n
comment13.params=pattern\ matches\ prefix\ current
comment13.target=void\ buildMatches(java.lang.String,\ java.util.Set,\ java.lang.String,\ LexiconNode)
comment13.text=\n\ buildMatches\n\ The\ recursive\ helper\ method\ for\ matchRegex\ -\ builds\ a\ list\ of\ all\ matches\n\ \n\ @param\ pattern\ -\ the\ regex\ pattern\n\ @param\ matches\ -the\ list\ which\ is\ added\ to\ over\ time\n\ @param\ prefix\ -\ builds\ up\ the\ path\ to\ the\ final\ node\ in\ a\ word\n\ @param\ current\ -\ the\ node\ which\ is\ being\ examined\ at\ present\ (starts\ as\ the\ root)\n
comment14.params=filename
comment14.target=java.lang.String\ readFileAsString(java.lang.String)
comment14.text=\n\ Reads\ the\ user-chosen\ file\ into\ a\ string.\ If\ the\ file\ doesn't\ exist\ it\ returns\ null\n\ \n\ @param\ filename\ is\ the\ name\ of\ the\ file\n\ @return\ the\ file\ as\ string\n\ \n\ Credit\ to\ Sean\ Barker\ for\ providing\ the\ code\n
comment2.params=str
comment2.target=boolean\ addWord(java.lang.String)
comment2.text=\n\ addWord\n\ Takes\ a\ string\ and\ adds\ it\ to\ the\ lexicon\n\ \n\ @param\ str\ -\ string\ which\ is\ to\ be\ added\n\ @return\ boolean,\ returns\ true\ if\ it\ is\ a\ new\ word\ for\ the\ Lexicon,\ false\ if\ it\ is\ already\ there\n
comment3.params=filename
comment3.target=int\ addWordsFromFile(java.lang.String)
comment3.text=\n\ addWordsFromFile\n\ Takes\ a\ file\ in\ which\ all\ the\ words\ are\ seperated\ by\ line,\ all\ all\ lower\ case,\ \n\ then\ adds\ each\ of\ the\ words\ to\ the\ Lexicon\n\ \n\ @param\ filename\ -\ the\ name\ of\ the\ file\ to\ be\ added\n\ @return\ int\ -\ the\ number\ of\ words\ in\ the\ file\n
comment4.params=str
comment4.target=boolean\ removeWord(java.lang.String)
comment4.text=\n\ removeWord\n\ Takes\ an\ already\ present\ word\ out\ of\ the\ lexicon\n\ \n\ @param\ str\ -\ the\ word\ to\ be\ removed\n\ @return\ boolean\ -\ false\ if\ the\ word\ isn't\ there,\ true\ otherwise.\n
comment5.params=
comment5.target=int\ numWords()
comment5.text=\n\ numWords\n\ Gives\ the\ total\ number\ of\ words\n\ \n\ @return\ int\ -\ the\ total\ number\ of\ words\n
comment6.params=str
comment6.target=boolean\ containsWord(java.lang.String)
comment6.text=\n\ containsWord\n\ Checks\ to\ see\ if\ a\ certain\ word\ is\ already\ present\ in\ the\ lexicon.\n\ \n\ @param\ str\ -\ the\ word\ to\ be\ checked\n\ @return\ boolean\ -\ true\ if\ it\ is\ there,\ false\ otherwise.\n
comment7.params=prefix
comment7.target=boolean\ containsPrefix(java.lang.String)
comment7.text=\n\ containsPrefix\n\ checks\ to\ see\ if\ a\ prefix\ is\ part\ of\ the\ lexicon\n\ \n\ @param\ prefix\ -\ the\ prefix\ to\ be\ checked\n\ @return\ boolean\ -\ true\ if\ it\ is\ there,\ false\ otherwise.\n
comment8.params=
comment8.target=java.util.Iterator\ iterator()
comment8.text=\n\ Iterator\n\ Calls\ a\ recursive\ helper\ method\ and\ returns\ an\ iterator\ over\ a\ list\ of\ all\ the\ words\ in\ the\ lexicon.\n\ \n\ @return\ Iterator<String>\ is\ the\ iterator\ which\ is\ returned\n
comment9.params=prefix\ current\ words
comment9.target=void\ buildList(java.lang.String,\ LexiconNode,\ java.util.ArrayList)
comment9.text=\n\ buildList\n\ The\ helper\ method\ for\ Iterator,\ finds\ all\ of\ the\ words\ and\ adds\ them\ to\ a\ list.\n\ \n\ @param\ prefix\ -\ builds\ up\ the\ path\ taken\ to\ the\ final\ node\ in\ the\ word\n\ @param\ current-\ the\ current\ node\ being\ examined\n\ @param\ words\ -\ the\ list\ which\ is\ added\ to\n
numComments=15
