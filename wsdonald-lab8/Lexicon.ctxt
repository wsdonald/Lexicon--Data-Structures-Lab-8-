#BlueJ class context
comment0.target=Lexicon
comment0.text=\n\ An\ interface\ for\ a\ lexicon,\ or\ word\ list.\ The\ main\ difference\ between\ a\n\ lexicon\ and\ a\ conventional\ dictionary\ is\ that\ a\ lexicon\ does\ not\ provide\ any\n\ mechanism\ for\ storing\ word\ definitions;\ a\ string\ is\ simply\ part\ of\ the\n\ lexicon\ or\ it\ isn't.\ The\ lexicon\ supports\ lookups\ of\ both\ prefix\ strings\ and\n\ complete\ words.\ For\ simplicity,\ all\ strings\ stored\ in\ the\ lexicon\ consist\ of\n\ lowercase\ letters\ only.\ You\ should\ not\ change\ this\ interface.\n\ \n\ @author\ Sean\ Barker\n
comment1.params=word
comment1.target=boolean\ addWord(java.lang.String)
comment1.text=\n\ Adds\ the\ specified\ word\ to\ the\ lexicon.\ Should\ run\ in\ time\ proportional\ to\n\ the\ length\ of\ the\ word\ being\ added.\ Returns\ whether\ the\ lexicon\ was\n\ modified\ by\ adding\ the\ word.\n\ \n\ @param\ word\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ word\ to\ add\ to\ the\ lexicon.\n\ @return\ True\ if\ the\ word\ was\ added\ and\ false\ if\ the\ word\ was\ already\ part\n\ \ \ \ \ \ \ \ \ of\ the\ lexicon.\n
comment2.params=filename
comment2.target=int\ addWordsFromFile(java.lang.String)
comment2.text=\n\ Reads\ the\ words\ contained\ in\ the\ specified\ file\ and\ adds\ them\ to\ the\n\ lexicon.\ The\ format\ of\ the\ given\ file\ is\ expected\ to\ be\ one\ word\ per\ line\n\ of\ the\ file.\ All\ words\ should\ be\ converted\ to\ lowercase\ before\ adding.\n\ Returns\ the\ number\ of\ new\ words\ added,\ or\ -1\ if\ the\ file\ could\ not\ be\ read.\n\ \n\ @param\ filename\n\ \ \ \ \ \ \ \ \ \ The\ name\ of\ the\ file\ to\ read.\n\ @return\ The\ number\ of\ new\ words\ added,\ or\ -1\ if\ the\ file\ could\ not\ be\ read.\n
comment3.params=word
comment3.target=boolean\ removeWord(java.lang.String)
comment3.text=\n\ Attempts\ to\ remove\ the\ specified\ word\ from\ the\ lexicon.\ If\ the\ word\ appears\n\ in\ the\ lexicon,\ it\ is\ removed\ and\ true\ is\ returned.\ If\ the\ word\ does\ not\n\ appear\ in\ the\ lexicon,\ the\ lexicon\ is\ unchanged\ and\ false\ is\ returned.\n\ Should\ run\ in\ time\ proportional\ to\ the\ length\ of\ the\ word\ being\ removed.\ It\n\ is\ implementation-dependent\ whether\ unneeded\ prefixes\ as\ a\ result\ of\n\ removing\ the\ word\ are\ also\ removed\ from\ the\ lexicon.\n\ \n\ @param\ word\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ word\ to\ remove\ from\ the\ lexicon.\n\ @return\ Whether\ the\ word\ was\ removed.\n
comment4.params=
comment4.target=int\ numWords()
comment4.text=\n\ Returns\ the\ number\ of\ words\ contained\ in\ the\ lexicon.\ Should\ run\ in\n\ constant\ time.\n\ \n\ @return\ The\ number\ of\ words\ in\ the\ lexicon.\n
comment5.params=word
comment5.target=boolean\ containsWord(java.lang.String)
comment5.text=\n\ Checks\ whether\ the\ given\ word\ exists\ in\ the\ lexicon.\ Should\ run\ in\ time\n\ proportional\ to\ the\ length\ of\ the\ word\ being\ looked\ up.\n\ \n\ @param\ word\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ word\ to\ lookup\ in\ the\ lexicon.\n\ @return\ Whether\ the\ given\ word\ exists\ in\ the\ lexicon.\n
comment6.params=prefix
comment6.target=boolean\ containsPrefix(java.lang.String)
comment6.text=\n\ Checks\ whether\ any\ words\ in\ the\ lexicon\ begin\ with\ the\ specified\ prefix.\ A\n\ word\ is\ defined\ to\ be\ a\ prefix\ of\ itself,\ and\ the\ empty\ string\ is\ defined\n\ to\ be\ a\ prefix\ of\ everything.\ Should\ run\ in\ time\ proportional\ to\ the\ length\n\ of\ the\ prefix.\n\ \n\ @param\ prefix\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ prefix\ to\ lookup\ in\ the\ lexicon.\n\ @return\ Whether\ the\ given\ prefix\ exists\ in\ the\ lexicon.\n
comment7.params=
comment7.target=java.util.Iterator\ iterator()
comment7.text=\n\ Returns\ an\ iterator\ over\ all\ words\ contained\ in\ the\ lexicon.\ The\ iterator\n\ should\ return\ words\ in\ the\ lexicon\ in\ alphabetical\ order.\n
comment8.params=target\ maxDistance
comment8.target=java.util.Set\ suggestCorrections(java.lang.String,\ int)
comment8.text=\n\ Returns\ a\ set\ of\ words\ in\ the\ lexicon\ that\ are\ suggested\ corrections\ for\ a\n\ given\ (possibly\ misspelled)\ word.\ Suggestions\ will\ include\ all\ words\ in\ the\n\ lexicon\ that\ are\ at\ most\ maxDistance\ distance\ from\ the\ target\ word,\ where\n\ the\ distance\ between\ two\ words\ is\ defined\ as\ the\ number\ of\ character\n\ positions\ in\ which\ the\ words\ differ.\ Should\ run\ in\ time\ proportional\ to\ the\n\ length\ of\ the\ target\ word.\n\ \n\ @param\ target\n\ \ \ \ \ \ \ \ \ \ The\ target\ word\ to\ be\ corrected.\n\ @param\ maxDistance\n\ \ \ \ \ \ \ \ \ \ The\ maximum\ word\ distance\ of\ suggested\ corrections.\n\ @return\ A\ set\ of\ all\ suggested\ corrections\ within\ maxDistance\ of\ the\ target\n\ \ \ \ \ \ \ \ \ word.\n
comment9.params=pattern
comment9.target=java.util.Set\ matchRegex(java.lang.String)
comment9.text=\n\ Returns\ a\ set\ of\ all\ words\ in\ the\ lexicon\ that\ match\ the\ given\ regular\n\ expression\ pattern.\ The\ regular\ expression\ pattern\ may\ contain\ only\ letters\n\ and\ wildcard\ characters\ '*',\ '?',\ and\ '_'.\n\ \n\ @param\ pattern\n\ \ \ \ \ \ \ \ \ \ The\ regular\ expression\ pattern\ to\ match.\n\ @return\ A\ set\ of\ all\ words\ in\ the\ lexicon\ matching\ the\ pattern.\n
numComments=10
